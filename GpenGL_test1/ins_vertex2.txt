//ins_vertex
#version 330 core

in vec3 position;
in vec3 color;

uniform vec3 rowdir;
uniform vec3 columndir;
uniform vec3 layerdir;
uniform int rownum;
uniform int columnnum;
uniform float eledimension;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

out Fragment
{
	vec4 dir;
    vec4 color;
} fragment;

// gl_InstanceID = layerindex *(rownum*columnnum) + rowindex * rownum + columnumindex
 
void main(void)
{
   float layer_index = floor(gl_InstanceID/rownum/columnnum);
   float row_index = floor((gl_InstanceID - layer_index*rownum*columnnum)/rownum);
   float column_index = gl_InstanceID - layer_index*rownum*columnnum - row_index * rownum;

   gl_Position = projection * view * model * vec4( position + ( row_index + 0.5) * columndir * eledimension + ( column_index +0.5 )* rowdir * eledimension + ( layer_index + 0.5 )* layerdir * eledimension , 1.0); 
   fragment.dir = projection * view * model * vec4(( row_index ) * columndir * eledimension + ( column_index )* rowdir * eledimension + ( layer_index  )* layerdir * eledimension , 1.0); 
   float color = row_index /256;
	while(color > 3)
	{
		color -= 3;
	}

	if(color < 1)	fragment.color = vec4(0,0,color,1.0);
	else if(color < 2)   fragment.color = vec4(0,color - 1,1.0,1.0);
	else /* color <3*/ fragment.color = vec4(color - 2,1.0,1.0,1.0);           
}